// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SelfUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import CoreText
import DeveloperToolsSupport
import FLAnimatedImage
import Foundation
@_exported import SelfUI
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct PassportStartScanView : SwiftUI.View {
  public init(onGettingStarted: @escaping () -> Swift.Void, onNavigationBack: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI21PassportStartScanViewV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers public class LivenessOverlayViewModel : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}

public struct ReadingPassportChipInstructionView : SwiftUI.View {
  public init(onGettingStarted: @escaping () -> Swift.Void, onNavigationBack: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI34ReadingPassportChipInstructionViewV4bodyQrvp", 0) __
}

public struct SelectDocumentView : SwiftUI.View {
  public var onSelect: ((_ documentType: SelfUI.DocumentType) -> Swift.Void)?
  public init(onSelect: ((_ documentType: SelfUI.DocumentType) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI18SelectDocumentViewV4bodyQrvp", 0) __
}

public struct PassportIntroductionView : SwiftUI.View {
  public init(onGettingStarted: @escaping () -> Swift.Void, onNavigateBack: @escaping () -> Swift.Void)
  public var onSelectNegative: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI24PassportIntroductionViewV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers public class FontLoader {
  public static func loadFont()
  @objc deinit
}

@_Concurrency.MainActor(unsafe) public struct LivenessVerificationFailedView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(remainingRetryNumber: Swift.Int = 0, onGettingStarted: @escaping () -> Swift.Void, onNavigationBack: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI30LivenessVerificationFailedViewV4bodyQrvp", 0) __
}

public struct PageContentView : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI15PageContentViewV4bodyQrvp", 0) __
}

public struct MRZInfo {
}
@_hasMissingDesignatedInitializers public class PassportUtils {
  public static func getMRZKey(passportNumber: Swift.String, dateOfBirth: Swift.String, dateOfExpiry: Swift.String) -> Swift.String
  @objc deinit
}
public struct PassportCheckChipView : SwiftUI.View {
  public init(onGettingStarted: @escaping () -> Swift.Void, onNavigationBack: @escaping () -> Swift.Void)
  public var onSelectNegative: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI21PassportCheckChipViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor(unsafe) public struct PassportMRZView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var onResult: ((Swift.String?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onNavigateBack: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onSelectNegative: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(onResult: ((Swift.String?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI15PassportMRZViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor(unsafe) public struct LivenessView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var onNavigateBack: () -> Swift.Void
  @_Concurrency.MainActor(unsafe) public var onAppeared: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(onAppeared: (() -> Swift.Void)? = nil, onNavigateBack: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func onChallengeChanged(challenge: Swift.String, isPassed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func onHighlight(isPassed: Swift.Bool)
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI12LivenessViewV4bodyQrvp", 0) __
}



public struct LivenessIntroductionView : SwiftUI.View {
  public init(onGettingStarted: @escaping () -> Swift.Void, onNavigationBack: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI24LivenessIntroductionViewV4bodyQrvp", 0) __
}
public enum DocumentType : Swift.CaseIterable {
  case none
  case passport
  case identityCard
  case drivingLicense
  public static func == (a: SelfUI.DocumentType, b: SelfUI.DocumentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SelfUI.DocumentType]
  public static var allCases: [SelfUI.DocumentType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}



public struct LivenessCameraView : SwiftUI.View {
  public var completion: (() -> Swift.Void)?
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI18LivenessCameraViewV4bodyQrvp", 0) __
}


public struct LivenessFlow : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI12LivenessFlowV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers public class ProgressStepViewModel : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}


public struct DocumentSorryView : SwiftUI.View {
  public init(onButtonClicked: @escaping () -> Swift.Void, onNavigateBack: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI17DocumentSorryViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor(unsafe) public struct PassportReadingChipView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(onViewAppeared: ((SelfUI.PassportReadingChipView) -> Swift.Void)? = nil, onNavigateBack: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var onCancel: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onRetry: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func displayAlert(showingAlert: Swift.Bool)
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI23PassportReadingChipViewV4bodyQrvp", 0) __
}

@_Concurrency.MainActor(unsafe) public struct PassportMRZFieldsManuallyView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(onResult: ((_ passportNumber: Swift.String, _ dob: Swift.String, _ doe: Swift.String) -> Swift.Void)? = nil, onNavigateBack: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6SelfUI29PassportMRZFieldsManuallyViewV4bodyQrvp", 0) __
}

extension SelfUI.DocumentType : Swift.Equatable {}
extension SelfUI.DocumentType : Swift.Hashable {}
